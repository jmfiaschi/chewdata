---
name: ci

on: push

env:
  CARGO_TERM_COLOR: always
  CHEWDATA_TAG: latest

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: Swatinem/rust-cache@v2
        with:
          shared-key: lint
      - run: rustup component add clippy
      - uses: actions-rs/clippy-check@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          args: --all-features
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true
      - run: cp .env.ci .env
      - uses: falti/dotenv-action@v1
      - uses: Swatinem/rust-cache@v2
        with:
          shared-key: build
      - run: make setup
      - run: make build
  benchmark:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: nelonoel/branch-name@v1.0.1
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true
      - run: cp .env.ci .env
      - uses: falti/dotenv-action@v1
      - uses: Swatinem/rust-cache@v2
        with:
          shared-key: benchmark
      - run: make setup
      - run: make bench | tee output.txt
      - name: Store benchmark result
        uses: rhysd/github-action-benchmark@v1
        with:
          tool: "cargo"
          output-file-path: output.txt
          github-token: ${{ secrets.GITHUB_TOKEN }}
          auto-push: true
          alert-threshold: "200%"
          comment-on-alert: true
          fail-on-alert: true
          alert-comment-cc-users: "@jmfiaschi"
          benchmark-data-dir-path: "docs/benches/${{ env.BRANCH_NAME }}"
  release:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true
      - run: cp .env.ci .env
      - uses: falti/dotenv-action@v1
      - uses: Swatinem/rust-cache@v2
        with:
          shared-key: release
      - run: make setup
      - run: make release
  unit-tests:
    needs: [build, lint]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true
      - run: cp .env.ci .env
      - uses: falti/dotenv-action@v1
      - uses: Swatinem/rust-cache@v2
        with:
          shared-key: build
      - run: make unit-tests
  integration-tests:
    needs: [build, lint]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true
      - run: cp .env.ci .env
      - uses: falti/dotenv-action@v1
      - uses: Swatinem/rust-cache@v2
        with:
          shared-key: build
      - run: make integration-tests
  semantic-release:
    needs: [benchmark, integration-tests, unit-tests, release]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: 18
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true
      - uses: Swatinem/rust-cache@v2
        with:
          shared-key: release
      - name: Install Semantic Release
        run: |
          sudo npm install semantic-release -g
          sudo npm install @semantic-release/changelog -g
          sudo npm install @semantic-release/git -g
          sudo npm install @semantic-release/github -g
          sudo npm install @semantic-release/exec -g
      - name: Run Semantic Release
        run: semantic-release
        env:
          GITHUB_TOKEN: ${{ secrets.SEMANTIC_RELEASE_GITHUB_TOKEN }}
          CARGO_REGISTRY_TOKEN: ${{ secrets.CARGO_REGISTRY_TOKEN }}
  docker:
    needs: [benchmark, integration-tests, unit-tests, release]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: Swatinem/rust-cache@v2
        with:
          shared-key: release
      - uses: docker/login-action@v2
        with:
          username: ${{ github.repository_owner }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}
      - run: cp .env.ci .env
      - run: CHEWDATA_TAG=$(make version) && echo "CHEWDATA_TAG=$CHEWDATA_TAG" >> $GITHUB_ENV
      - uses: docker/setup-buildx-action@v2
      - uses: docker/build-push-action@v3
        with:
          context: .
          push: true
          tags: ${{ github.repository_owner }}/chewdata:${{ env.CHEWDATA_TAG }}
      - run: echo ${{ steps.docker_build.outputs.digest }}
